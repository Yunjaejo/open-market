generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  pwd       String
  name      String
  phone     String   @unique
  nickname  String   @unique
  address   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  type      UserType

  items        Item[]
  cart         Cart[]
  order        Order[]
  review       Review[]
  refreshToken RefreshToken?

  @@index([email])
  @@index([nickname])
  @@index([phone])
  @@map("users")
}

enum UserType {
  CUSTOMER
  SELLER
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  issuedAt  DateTime @default(now()) @map("issued_at")
  userId    Int      @unique @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  quantity    Int
  imageUrl    String?  @map("image_url")
  info        String
  reviewCount Int      @map("review_count")
  category    Category
  nickname    String
  userId      Int      @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItem OrderItem[]
  Cart      Cart[]

  @@index([userId])
  @@map("items")
}

enum Category {
  ELECTRONICS
  FASHION
  FOOD
  PET
  ETC
}

model Cart {
  id        Int      @id @default(autoincrement())
  itemId    Int      @map("item_id")
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Int         @map("total_price")
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now()) @map("created_at")
  userId     Int         @map("user_id")

  user User @relation(fields: [userId], references: [id])

  orderItem OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  FULFILLED
  CANCELLED
}

model OrderItem {
  id       Int @id @default(autoincrement())
  orderId  Int @map("order_id")
  itemId   Int @map("item_id")
  price    Int
  quantity Int

  order Order @relation(fields: [orderId], references: [id])
  item  Item  @relation(fields: [itemId], references: [id])

  @@map("order_items")
}

model Review {
  id        Int      @id @default(autoincrement())
  itemId    Int      @map("item_id")
  nickname  String
  rating    Int
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  isDeleted Boolean? @map("is_deleted")
  userId    Int      @map("user_id")

  user User @relation(fields: [userId], references: [id])

  reviewComment ReviewComment[]

  @@map("reviews")
}

model ReviewComment {
  id        Int      @id @default(autoincrement())
  nickname  String
  content   String
  type      UserType
  createdAt DateTime @default(now()) @map("created_at")
  reviewId  Int      @map("review_id")

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_comments")
}
